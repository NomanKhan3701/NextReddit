import Head from 'next/head'
import { useEffect, useState } from 'react';
import Footer from '../components/Footer/Footer';
import Images from '../components/Images/Images'
import Loader from '../components/Loader/Loader';
import Topbar from '../components/Topbar/Topbar';

export default function Home({ ImageUrls }) {
  const [limit, setLimit] = useState(0);
  const [imageUrl, setImageUrl] = useState(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (imageUrl === null) {
      setImageUrl(ImageUrls)
    }
  }, [])

  const getImageByUser = async () => {
    if (imageUrl.length != limit) {
      let sendLimit = Number(limit);
      setLoading(true);
      if (limit == 3 || limit == 5)
        sendLimit = Number(limit) + 1;

      const res = await fetch(`https://www.reddit.com/r/images/new.json?limit=${sendLimit}`)
      const response = await res.json();
      const imageUrlsArray = await response.data.children.map((child) => {
        return child.data.thumbnail
      })
      console.log(limit, imageUrlsArray.length)
      await setImageUrl(imageUrlsArray);
      setLoading(false)

    }

  }

  return (
    <div className='main'>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Topbar />

      <div className='user-input'>
        <input type="number" placeholder='Enter number of images...' value={limit} onChange={(e) => setLimit(e.target.value)} />
        <div className='btn' onClick={getImageByUser}>Get Images</div>
      </div>

      <main>
        {loading ? <Loader /> : <Images ImageUrls={imageUrl ? imageUrl : ImageUrls} />}
      </main>


      <Footer />
    </div>
  )
}

export async function getStaticProps() {
  const response = await (await fetch(`https://www.reddit.com/r/images/new.json?limit=30`)).json();
  const ImageUrls = response.data.children.map((child) => {
    return child.data.thumbnail
  })
  return {
    props: { ImageUrls: ImageUrls },
  }
}
